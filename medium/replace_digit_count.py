# -*- coding: utf-8 -*-

'''
Напишите функцию, подсчитывающую количество
одинаковых цифр в числе.

Условия:
- функция принимает число (исходим из того, что числа будут целыми и положительными)
- каждая цифра заменяется на число вхождений этой цифры в число
- итоговое число, возвращаемое функцией, должно быть целым числом, а не строкой.

Разбор примера
digit_count(136116)  312332
# Цифра 1 появляется трижды, поэтому все единицы заменяются на тройки.
# Цифра 3 появляется только один раз, поэтому тройка заменяется единицей.
# Цифра 6 появляется дважды, поэтому обе шестерки заменяются двойками.
# Возвращается целое число.

Другие примеры
digit_count(221333)  221333
digit_count(136116)  312332
digit_count(2)       1
'''

def replace_digit_count(nbr: int) -> int:
    '''
    Замена каждой цифры её количеством
    повторений в числе.
    
    Возвращает новое полученное число.
    '''
    # Преобразовываем число в строку
    nbr = str(nbr)
    # Создадаём перечень находящихся цифр в числе -
    # то что будет заменено
    map_digit = ''.join(set(nbr))
    # Создадаём шаблон по которому будут заменены цифры -
    # то на что будет меняться
    code = ''.join(str(nbr.count(item)) for item in map_digit)
    # Меняем цифры в числе согласно шаблону, и полученную
    # строку преобразовываем в число
    return int(nbr.translate(str.maketrans(map_digit, code)))



tests = ((136116, 312332),
         (221333, 221333),
         (136116, 312332),
         (2, 1))

for nbr, check in tests:
    print(replace_digit_count(nbr=nbr) == check)

