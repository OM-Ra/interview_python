# -*- coding: utf-8 -*-

'''
Есть план этажа здания. На этом этаже 4 комнаты (1, 2, 3, 4),
все выходят в общий коридор. Комнаты не сообщаются между собой:
чтобы перейти из одной комнаты в любую другую, нужно пройти
через коридор.

Создайте функцию, которая будет проверять, возможен ли переданный
ей путь по комнатам. Коридор будет обозначаться буквой «H» (Hall).

Примеры
possible_path([1, "H", 2, "H", 3, "H", 4])  True
possible_path(["H", 3, "H"])  True
possible_path([1, 2, "H", 3])  False

Примечания
- Путь может начинаться или кончаться в коридоре.
- В качестве инпута будут передаваться только цифры 1-4 и/или буква «H».
- Комнаты не будут повторяться.
'''

def possible_path(arr: list) -> bool:
    '''
    Определяет правильность последовательности
    элементов списка arr.
    '''
    # Валидный список будут состоять только из
    # двух типов: строки и числа.
    # Так что, достаточно проверить очерёдность
    # этих типов элементов.
    return all(type(arr[0]) != type(item)      # Все типы нечётных элементов, начиная с 1, не должны совпадать с 0 типом элемента списка
               if index & 1                    # Условие нечётности
               else type(arr[0]) == type(item) # Все чётные типы элементов, начиная с 0, должны совпадать
               for index, item in enumerate(arr))



tests = (([1, "H", 2, "H", 3, "H", 4], True),
         (["H", 3, "H"], True),
         ([1, 2, "H", 3], False))

for arr, check in tests:
    print(possible_path(arr=arr) == check)

