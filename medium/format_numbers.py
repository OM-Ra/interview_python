# -*- coding: utf-8 -*-

'''
В БД предприятия номера телефонов хранятся как попало и вам
поручили написать функцию, которая приведёт их к одному формату:
+7(909)101-10-10

Функция должна называться format_numbers,
она принимает на вход строку (исходный номер) и возвращает строку
(номер в нужном формате).

Сигнатура def format_numbers(phone_number: str) -> str:

Примечания по исходному номеру:

- помимо цифр может содержать дефисы, пробелы, скобки и знак +
(но + только первым символом)
- номер всегда валиден (11 цифр)
- номер всегда начинается с 8 или +7, причем +
может быть только в начале номера
- не может быть 2 идущих подряд дефисов, скобок или пробелов

Примеры:

format_numbers('+79091011010') == '+7(909)101-10-10'
format_numbers('8(909)1011010') == '+7(909)101-10-10'
format_numbers('+7 909 101-10-10') == '+7(909)101-10-10'
'''

def format_numbers(phone_number: str) -> str:
    '''
    Форматирует строку phone_number к необходимому виду.
    Примет: '+79091011010' -> '+7(909)101-10-10'.
    '''
    # Удаление из строки phone_number всех возможных символов кроме цифр
    s = phone_number.translate(str.maketrans('+-()', ' ' * 4)) \
                    .replace(' ', '')
    # Форматирование полученной строки к необходимому виду
    return f'+7({s[1:4]}){s[4:7]}-{s[7:9]}-{s[9:]}'



tests = (('+79091011010', '+7(909)101-10-10'),
         ('8(909)1011010', '+7(909)101-10-10'),
         ('+7 909 101-10-10', '+7(909)101-10-10'))

for nbr, check in tests:
    print(format_numbers(phone_number=nbr))

