# -*- coding: utf-8 -*-

'''
Сталактиты свисают с потолка пещеры, а сталагмиты растут из пола.

Создайте функцию, которая определяет, представляет ли ввод
«stalactites» (сталактиты) или «stalagmites» (сталагмиты).
Если ввод содержит и сталактиты, и сталагмиты, верните «both» («оба»).

Ввод будет двухмерным списком, где 1 представляет кусок камня, а
0 — воздушное пространство.

Примеры:

mineralFormation([
  [0, 1, 0, 1],
  [0, 1, 0, 1],
  [0, 0, 0, 1],
  [0, 0, 0, 0]
]) "stalactites"

mineralFormation([
  [0, 0, 0, 0],
  [0, 1, 0, 1],
  [0, 1, 1, 1],
  [0, 1, 1, 1]
]) "stalagmites"

mineralFormation([
  [1, 0, 1, 0],
  [1, 1, 0, 1],
  [0, 1, 1, 1],
  [0, 1, 1, 1]
])  "both"
'''

from typing import List

# Вектор из целочисленных значений.
VectorInt = List[int]
# Матрица из векторов содержащих целочисленные числа.
MatrixInt = List[VectorInt]

def mineralFormation(data: MatrixInt) -> str:
    '''
    Определяет содержит ли матрица data значения
    обозначающие:
      - сталактиты (stalactites);
      - сталагмиты (stalagmites);
      - оба значения (both).

    data: MatrixInt
        - Матрица из векторов содержащих целочисленные числа.
      Сверху матрицы берут начало сталактиты, имеют значение 1.
      Снизу матрицы берут начало сталагмиты, имеют значение 1.
      Нулём (0) - обозначается воздушное пространство.

    return: str
      - "stalactites" - если содержит только сталактиты;
      - "stalagmites" - если содержит только сталагмиты;
      - "both" - если содержит оба варианта;
      - "" - если отсутствуют оба варианта.
    '''
    # Маска для выбора ответа.
    pos = [bool(data[i].count(1))
           for i in (0, -1)]
    # Получение и возврат результата.
    return ['', 'stalactites', 'stalagmites', 'both'][pos[0] + pos[1] * 2]


# Тесты.
tests = (
  ([
  [0, 1, 0, 1],
  [0, 1, 0, 1],
  [0, 0, 0, 1],
  [0, 0, 0, 0]
], "stalactites"),

  ([
  [0, 0, 0, 0],
  [0, 1, 0, 1],
  [0, 1, 1, 1],
  [0, 1, 1, 1]
], "stalagmites"),

([
  [1, 0, 1, 0],
  [1, 1, 0, 1],
  [0, 1, 1, 1],
  [0, 1, 1, 1]
],  "both"),

([
  [0, 0, 0, 0],
  [0, 0, 0, 0],
  [0, 0, 0, 0],
  [0, 0, 0, 0]
],  ""),
)

for index, item in enumerate(tests):
    res = mineralFormation(data=item[0])
    assert res == item[1], f'tests:{index:>02} >>> {item[0]} -> {res} != {item[1]}'

